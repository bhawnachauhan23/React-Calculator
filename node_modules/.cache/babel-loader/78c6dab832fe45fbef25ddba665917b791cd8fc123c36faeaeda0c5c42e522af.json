{"ast":null,"code":"import _slicedToArray from \"C:/Users/Rohit/Desktop/cal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rohit\\\\Desktop\\\\cal\\\\src\\\\Components\\\\Calculator.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport react, { useState } from \"react\"; // importing React and useState hook from react package\nimport Button from \"./Button\"; // importing Button component from Button.js file\nimport Display from \"./Display\"; // importing Display component from Display.js file\n\n// defining Calculator component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar Calculator = function Calculator() {\n  _s();\n  // initializing state for query string and its setter using useState hook\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    query = _useState2[0],\n    setQuery = _useState2[1];\n  // initializing state for answer string and its setter using useState hook\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    answer = _useState4[0],\n    setAnswer = _useState4[1];\n  // defining an array of button values\n  var arr = [\"Delete\", \"CE\", \"/\", \"7\", \"8\", \"9\", \"%\", \"4\", \"5\", \"6\", \"*\", \"1\", \"2\", \"3\", \"-\", \"+\", \"0\", \".\", \"+/-\", \"Result\"];\n\n  // defining click handler function for buttons\n  var clickHandler = function clickHandler(e) {\n    // getting the value of clicked button\n    var value = e.target.value;\n    switch (value // switch case for different button values\n    ) {\n      case \"Result\":\n        {\n          // if button value is \"Result\"\n          var result = \"\";\n          try {\n            // evaluating the query string using eval function\n            result = eval(query); // storing the result in result variable\n          } catch (err) {\n            // if there is a math error, catching the error\n            setAnswer(\"Math Error\"); // setting answer state to \"Math Error\"\n            break;\n          }\n          setQuery(result); // updating query state with the result\n          setAnswer(result); // updating answer state with the result\n          break;\n        }\n      case \"%\":\n        {\n          // if button value is \"%\"\n          setQuery(query / 100); // updating query state by dividing it by 100\n          break;\n        }\n      case \"+/-\":\n        {\n          // if button value is \"+/-\"\n          setQuery(-1 * query); // updating query state by multiplying it by -1\n          break;\n        }\n      case \"CE\":\n        {\n          // if button value is \"CE\"\n          setQuery(\"\"); // setting query state to empty string\n          setAnswer(\"\"); // setting answer state to empty string\n          break;\n        }\n      case \"Delete\":\n        {\n          // if button value is \"Delete\"\n          try {\n            // removing the last character from query string using substr() function\n            setQuery(query.substr(0, query.length - 1));\n          } catch (err) {\n            // if there is an error, setting both query and answer state to empty string\n            setQuery(\"\");\n            setAnswer(\"\");\n            break;\n          }\n          break;\n        }\n      default:\n        {\n          // if button value is any other value\n          setQuery(query += value); // updating query state by concatenating the value to it\n        }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(Display, {\n        answer: answer,\n        query: query\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, _this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keypad\",\n        children: [\" \", arr.map(function (item // mapping the array of button values to Button components with clickHandler function as prop\n        ) {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            clickHandler: clickHandler,\n            value: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, _this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n_s(Calculator, \"sjEa4/K9IBTnUccM5eiTpfyx69I=\");\n_c = Calculator;\nexport default Calculator; // exporting Calculator component as default export\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["react","useState","Button","Display","jsxDEV","_jsxDEV","Fragment","_Fragment","Calculator","_s","_useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","answer","setAnswer","arr","clickHandler","e","value","target","result","eval","err","substr","length","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_this","map","item","_c","$RefreshReg$"],"sources":["C:/Users/Rohit/Desktop/cal/src/Components/Calculator.js"],"sourcesContent":["import react, { useState } from \"react\"; // importing React and useState hook from react package\r\nimport Button from \"./Button\"; // importing Button component from Button.js file\r\nimport Display from \"./Display\"; // importing Display component from Display.js file\r\n\r\n// defining Calculator component\r\nlet Calculator = () => {\r\n  // initializing state for query string and its setter using useState hook\r\n  let [query, setQuery] = useState(\"\");\r\n  // initializing state for answer string and its setter using useState hook\r\n  let [answer, setAnswer] = useState(\"\");\r\n  // defining an array of button values\r\n  let arr = [\r\n    \"Delete\",\r\n    \"CE\",\r\n    \"/\",\r\n    \"7\",\r\n    \"8\",\r\n    \"9\",\r\n    \"%\",\r\n    \"4\",\r\n    \"5\",\r\n    \"6\",\r\n    \"*\",\r\n    \"1\",\r\n    \"2\",\r\n    \"3\",\r\n    \"-\",\r\n    \"+\",\r\n    \"0\",\r\n    \".\",\r\n    \"+/-\",\r\n    \"Result\"\r\n  ];\r\n\r\n  // defining click handler function for buttons\r\n  let clickHandler = (e) => {\r\n    // getting the value of clicked button\r\n    let value = e.target.value;\r\n    switch (\r\n      value // switch case for different button values\r\n    ) {\r\n      case \"Result\": {\r\n        // if button value is \"Result\"\r\n        let result = \"\";\r\n        try {\r\n          // evaluating the query string using eval function\r\n          result = eval(query); // storing the result in result variable\r\n        } catch (err) {\r\n          // if there is a math error, catching the error\r\n          setAnswer(\"Math Error\"); // setting answer state to \"Math Error\"\r\n          break;\r\n        }\r\n        setQuery(result); // updating query state with the result\r\n        setAnswer(result); // updating answer state with the result\r\n        break;\r\n      }\r\n      case \"%\": {\r\n        // if button value is \"%\"\r\n        setQuery(query / 100); // updating query state by dividing it by 100\r\n        break;\r\n      }\r\n      case \"+/-\": {\r\n        // if button value is \"+/-\"\r\n        setQuery(-1 * query); // updating query state by multiplying it by -1\r\n        break;\r\n      }\r\n      case \"CE\": {\r\n        // if button value is \"CE\"\r\n        setQuery(\"\"); // setting query state to empty string\r\n        setAnswer(\"\"); // setting answer state to empty string\r\n        break;\r\n      }\r\n      case \"Delete\": {\r\n        // if button value is \"Delete\"\r\n        try {\r\n          // removing the last character from query string using substr() function\r\n          setQuery(query.substr(0, query.length - 1));\r\n        } catch (err) {\r\n          // if there is an error, setting both query and answer state to empty string\r\n          setQuery(\"\");\r\n          setAnswer(\"\");\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        // if button value is any other value\r\n        setQuery((query += value)); // updating query state by concatenating the value to it\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        {\" \"}\r\n        {/* main container */}\r\n        <Display answer={answer} query={query} />{\" \"}\r\n        {/* OutputScreen component with answer and query state as props */}\r\n        <div className=\"keypad\">\r\n          {\" \"}\r\n          {/* keypad container */}\r\n          {arr.map((\r\n            item // mapping the array of button values to Button components with clickHandler function as prop\r\n          ) => (\r\n            <Button clickHandler={clickHandler} value={item} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Calculator; // exporting Calculator component as default export\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}